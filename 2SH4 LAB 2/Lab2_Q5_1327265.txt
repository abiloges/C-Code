/* LAB 2 QUESTION 5
 * File:   main.c
 * Name: Abilash Logeswaran
 * Lab Section: L04
 * Student ID: 1327265
 */

#include <stdio.h>

/* This library includes two functions that deal with sparse vectors: one 
 * creates two arrays of its non-zero integers and their indices and
 * the other reconstructs a sparse vector from these arrays*/

void efficient(const int source[], int val[], int pos[], int size);
void reconstruct(int source[], int m, const int val[], const int pos[], int n);

/* As long as the value of an entry is not zero, its value is recorded in the
 * value array and its position is recorded in the position array*/

void efficient(const int source[], int val[], int pos[], int size) {
    
    int i,j = 0;
    
    for (i=0; i<size; i++) {
        
        if ((source[i]) != 0){
            
            val[j] = source[i];
            pos[j] = i;
            
            j++;
            
        }
        
    }
    
}

/* This function first initializes the sparse vector array as containing all
 * zeroes and then based on the positions and values in their respective 
 * arrays, it changes the values of the sparse vector as applicable */

void reconstruct(int source[], int m, const int val[], const int pos[], int n) {
    
    int i,j;
    
    for (i=0; i<m; i++) {
        
        source[i] = 0;
        
    }
    
    for (i=0; i<n; i++) {
        
        j = pos[i];
        source[j] = val[i];
        
    }
}



int main(void) {
    
    int vector[11] = {0,0,0,3,5,0,24,-45,0,0,33};
    int val[5];
    int pos[5];
    int construct[11];
    int i;
    
    efficient(vector,val,pos,11);
   
    printf("The values of the non-zero components are: ");
    
    printf("%d %d %d %d %d \n", val[0], val[1], val[2], val[3],val[4]);
    
     printf("The indices of the non-zero components are: ");
    
    printf("%d %d %d %d %d", pos[0], pos[1], pos[2], pos[3],pos[4]);
    
    printf("\n");
    
    reconstruct(construct,11,val,pos,5);
    
    printf("The values of the reconstructed sparse vector are: ");
    
    for (i=0;i<11;i++) {
        
        printf("%d ", construct[i]);
        
    }
    
    return 0;
    
}
